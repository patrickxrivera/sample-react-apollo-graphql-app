type User {
  id: ID!
  name: String!
  username: String!
  password: String!
  memberOf: [PeerCircle]!
}

type PeerCircle {
  id: ID!
  name: String!
  threads: [Thread]!
}

type Thread {
  id: ID!
  author: User!
  title: String!
  body: String!
  comments: [Comment]!
  peerCircle: PeerCircle!
  participants: [User!]!
  messageCount: Int!
}

type Comment {
  id: ID!
  author: User!
  text: String!
}

type Query {
  info: String!
  getPeerCircles: [PeerCircle!]!
  getPeerCircle(id: ID!): PeerCircle
}

type Mutation {
  createPeerCircle(name: String!): PeerCircle!
  deletePeerCircle(id: ID!): PeerCircle
  updatePeerCircle(id: ID!, name: String!): PeerCircle
}
